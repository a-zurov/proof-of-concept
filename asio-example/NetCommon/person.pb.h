// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_person_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_person_2eproto;
namespace olc {
class Address;
struct AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace olc
PROTOBUF_NAMESPACE_OPEN
template <>
::olc::Address* Arena::CreateMaybeMessage<::olc::Address>(Arena*);
template <>
::olc::Person* Arena::CreateMaybeMessage<::olc::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace olc {

// ===================================================================


// -------------------------------------------------------------------

class Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olc.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  explicit PROTOBUF_CONSTEXPR Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Address& from) {
    Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "olc.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetFieldNumber = 1,
    kBuildingFieldNumber = 2,
  };
  // string street = 1;
  void clear_street() ;
  const std::string& street() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_street(Arg_&& arg, Args_... args);
  std::string* mutable_street();
  PROTOBUF_NODISCARD std::string* release_street();
  void set_allocated_street(std::string* ptr);

  private:
  const std::string& _internal_street() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_street(
      const std::string& value);
  std::string* _internal_mutable_street();

  public:
  // int32 building = 2;
  void clear_building() ;
  ::int32_t building() const;
  void set_building(::int32_t value);

  private:
  ::int32_t _internal_building() const;
  void _internal_set_building(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:olc.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
    ::int32_t building_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_person_2eproto;
};// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olc.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit PROTOBUF_CONSTEXPR Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "olc.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 4,
    kNameFieldNumber = 1,
    kAddressFieldNumber = 3,
    kAgeFieldNumber = 2,
  };
  // repeated string phone_number = 4;
  int phone_number_size() const;
  private:
  int _internal_phone_number_size() const;

  public:
  void clear_phone_number() ;
  const std::string& phone_number(int index) const;
  std::string* mutable_phone_number(int index);
  void set_phone_number(int index, const std::string& value);
  void set_phone_number(int index, std::string&& value);
  void set_phone_number(int index, const char* value);
  void set_phone_number(int index, const char* value, std::size_t size);
  void set_phone_number(int index, absl::string_view value);
  std::string* add_phone_number();
  void add_phone_number(const std::string& value);
  void add_phone_number(std::string&& value);
  void add_phone_number(const char* value);
  void add_phone_number(const char* value, std::size_t size);
  void add_phone_number(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phone_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phone_number();

  private:
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_phone_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_phone_number();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .olc.Address address = 3;
  bool has_address() const;
  void clear_address() ;
  const ::olc::Address& address() const;
  PROTOBUF_NODISCARD ::olc::Address* release_address();
  ::olc::Address* mutable_address();
  void set_allocated_address(::olc::Address* value);
  void unsafe_arena_set_allocated_address(::olc::Address* value);
  ::olc::Address* unsafe_arena_release_address();

  private:
  const ::olc::Address& _internal_address() const;
  ::olc::Address* _internal_mutable_address();

  public:
  // int32 age = 2;
  void clear_age() ;
  ::int32_t age() const;
  void set_age(::int32_t value);

  private:
  ::int32_t _internal_age() const;
  void _internal_set_age(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:olc.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phone_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::olc::Address* address_;
    ::int32_t age_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_person_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Address

// string street = 1;
inline void Address::clear_street() {
  _impl_.street_.ClearToEmpty();
}
inline const std::string& Address::street() const {
  // @@protoc_insertion_point(field_get:olc.Address.street)
  return _internal_street();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Address::set_street(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.street_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:olc.Address.street)
}
inline std::string* Address::mutable_street() {
  std::string* _s = _internal_mutable_street();
  // @@protoc_insertion_point(field_mutable:olc.Address.street)
  return _s;
}
inline const std::string& Address::_internal_street() const {
  return _impl_.street_.Get();
}
inline void Address::_internal_set_street(const std::string& value) {
  ;
  _impl_.street_.Set(value, GetArenaForAllocation());
}
inline std::string* Address::_internal_mutable_street() {
  ;
  return _impl_.street_.Mutable( GetArenaForAllocation());
}
inline std::string* Address::release_street() {
  // @@protoc_insertion_point(field_release:olc.Address.street)
  return _impl_.street_.Release();
}
inline void Address::set_allocated_street(std::string* value) {
  _impl_.street_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.street_.IsDefault()) {
          _impl_.street_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:olc.Address.street)
}

// int32 building = 2;
inline void Address::clear_building() {
  _impl_.building_ = 0;
}
inline ::int32_t Address::building() const {
  // @@protoc_insertion_point(field_get:olc.Address.building)
  return _internal_building();
}
inline void Address::set_building(::int32_t value) {
  _internal_set_building(value);
  // @@protoc_insertion_point(field_set:olc.Address.building)
}
inline ::int32_t Address::_internal_building() const {
  return _impl_.building_;
}
inline void Address::_internal_set_building(::int32_t value) {
  ;
  _impl_.building_ = value;
}

// -------------------------------------------------------------------

// Person

// string name = 1;
inline void Person::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:olc.Person.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Person::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:olc.Person.name)
}
inline std::string* Person::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:olc.Person.name)
  return _s;
}
inline const std::string& Person::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:olc.Person.name)
  return _impl_.name_.Release();
}
inline void Person::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:olc.Person.name)
}

// int32 age = 2;
inline void Person::clear_age() {
  _impl_.age_ = 0;
}
inline ::int32_t Person::age() const {
  // @@protoc_insertion_point(field_get:olc.Person.age)
  return _internal_age();
}
inline void Person::set_age(::int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:olc.Person.age)
}
inline ::int32_t Person::_internal_age() const {
  return _impl_.age_;
}
inline void Person::_internal_set_age(::int32_t value) {
  ;
  _impl_.age_ = value;
}

// .olc.Address address = 3;
inline bool Person::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline void Person::clear_address() {
  if (_impl_.address_ != nullptr) _impl_.address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::olc::Address& Person::_internal_address() const {
  const ::olc::Address* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::olc::Address&>(::olc::_Address_default_instance_);
}
inline const ::olc::Address& Person::address() const {
  // @@protoc_insertion_point(field_get:olc.Person.address)
  return _internal_address();
}
inline void Person::unsafe_arena_set_allocated_address(::olc::Address* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::olc::Address*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:olc.Person.address)
}
inline ::olc::Address* Person::release_address() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::olc::Address* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(released);
  released = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::olc::Address* Person::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:olc.Person.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::olc::Address* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::olc::Address* Person::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::olc::Address>(GetArenaForAllocation());
    _impl_.address_ = reinterpret_cast<::olc::Address*>(p);
  }
  return _impl_.address_;
}
inline ::olc::Address* Person::mutable_address() {
  ::olc::Address* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:olc.Person.address)
  return _msg;
}
inline void Person::set_allocated_address(::olc::Address* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::olc::Address*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reinterpret_cast<::olc::Address*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::olc::Address*>(value);
  // @@protoc_insertion_point(field_set_allocated:olc.Person.address)
}

// repeated string phone_number = 4;
inline int Person::_internal_phone_number_size() const {
  return _impl_.phone_number_.size();
}
inline int Person::phone_number_size() const {
  return _internal_phone_number_size();
}
inline void Person::clear_phone_number() {
  _internal_mutable_phone_number()->Clear();
}
inline std::string* Person::add_phone_number() {
  std::string* _s = _internal_mutable_phone_number()->Add();
  // @@protoc_insertion_point(field_add_mutable:olc.Person.phone_number)
  return _s;
}
inline const std::string& Person::phone_number(int index) const {
  // @@protoc_insertion_point(field_get:olc.Person.phone_number)
  return _internal_phone_number().Get(index);
}
inline std::string* Person::mutable_phone_number(int index) {
  // @@protoc_insertion_point(field_mutable:olc.Person.phone_number)
  return _internal_mutable_phone_number()->Mutable(index);
}
inline void Person::set_phone_number(int index, const std::string& value) {
  _internal_mutable_phone_number()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:olc.Person.phone_number)
}
inline void Person::set_phone_number(int index, std::string&& value) {
  _internal_mutable_phone_number()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:olc.Person.phone_number)
}
inline void Person::set_phone_number(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_phone_number()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olc.Person.phone_number)
}
inline void Person::set_phone_number(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_phone_number()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olc.Person.phone_number)
}
inline void Person::set_phone_number(int index, absl::string_view value) {
  _internal_mutable_phone_number()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:olc.Person.phone_number)
}
inline void Person::add_phone_number(const std::string& value) {
  _internal_mutable_phone_number()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:olc.Person.phone_number)
}
inline void Person::add_phone_number(std::string&& value) {
  _internal_mutable_phone_number()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:olc.Person.phone_number)
}
inline void Person::add_phone_number(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_phone_number()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olc.Person.phone_number)
}
inline void Person::add_phone_number(const char* value, std::size_t size) {
  _internal_mutable_phone_number()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olc.Person.phone_number)
}
inline void Person::add_phone_number(absl::string_view value) {
  _internal_mutable_phone_number()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:olc.Person.phone_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::phone_number() const {
  // @@protoc_insertion_point(field_list:olc.Person.phone_number)
  return _internal_phone_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Person::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable_list:olc.Person.phone_number)
  return _internal_mutable_phone_number();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::_internal_phone_number() const {
  return _impl_.phone_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::_internal_mutable_phone_number() {
  return &_impl_.phone_number_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace olc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_person_2eproto_2epb_2eh
