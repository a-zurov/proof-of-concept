// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace olc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_person_2eproto();
void protobuf_AssignDesc_person_2eproto();
void protobuf_ShutdownFile_person_2eproto();

class Address;
class Person;

// ===================================================================

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:olc.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  inline Address* New() const { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string street = 1;
  void clear_street();
  static const int kStreetFieldNumber = 1;
  const ::std::string& street() const;
  void set_street(const ::std::string& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  ::std::string* mutable_street();
  ::std::string* release_street();
  void set_allocated_street(::std::string* street);

  // optional int32 building = 2;
  void clear_building();
  static const int kBuildingFieldNumber = 2;
  ::google::protobuf::int32 building() const;
  void set_building(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:olc.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr street_;
  ::google::protobuf::int32 building_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Address* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:olc.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional .olc.Address address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::olc::Address& address() const;
  ::olc::Address* mutable_address();
  ::olc::Address* release_address();
  void set_allocated_address(::olc::Address* address);

  // repeated string phone_number = 4;
  int phone_number_size() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 4;
  const ::std::string& phone_number(int index) const;
  ::std::string* mutable_phone_number(int index);
  void set_phone_number(int index, const ::std::string& value);
  void set_phone_number(int index, const char* value);
  void set_phone_number(int index, const char* value, size_t size);
  ::std::string* add_phone_number();
  void add_phone_number(const ::std::string& value);
  void add_phone_number(const char* value);
  void add_phone_number(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& phone_number() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phone_number();

  // @@protoc_insertion_point(class_scope:olc.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::olc::Address* address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phone_number_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// optional string street = 1;
inline void Address::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::street() const {
  // @@protoc_insertion_point(field_get:olc.Address.street)
  return street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_street(const ::std::string& value) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:olc.Address.street)
}
inline void Address::set_street(const char* value) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olc.Address.street)
}
inline void Address::set_street(const char* value, size_t size) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olc.Address.street)
}
inline ::std::string* Address::mutable_street() {
  
  // @@protoc_insertion_point(field_mutable:olc.Address.street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_street() {
  // @@protoc_insertion_point(field_release:olc.Address.street)
  
  return street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_street(::std::string* street) {
  if (street != NULL) {
    
  } else {
    
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:olc.Address.street)
}

// optional int32 building = 2;
inline void Address::clear_building() {
  building_ = 0;
}
inline ::google::protobuf::int32 Address::building() const {
  // @@protoc_insertion_point(field_get:olc.Address.building)
  return building_;
}
inline void Address::set_building(::google::protobuf::int32 value) {
  
  building_ = value;
  // @@protoc_insertion_point(field_set:olc.Address.building)
}

// -------------------------------------------------------------------

// Person

// optional string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:olc.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:olc.Person.name)
}
inline void Person::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olc.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olc.Person.name)
}
inline ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:olc.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:olc.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:olc.Person.name)
}

// optional int32 age = 2;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:olc.Person.age)
  return age_;
}
inline void Person::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:olc.Person.age)
}

// optional .olc.Address address = 3;
inline bool Person::has_address() const {
  return !_is_default_instance_ && address_ != NULL;
}
inline void Person::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
inline const ::olc::Address& Person::address() const {
  // @@protoc_insertion_point(field_get:olc.Person.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::olc::Address* Person::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::olc::Address;
  }
  // @@protoc_insertion_point(field_mutable:olc.Person.address)
  return address_;
}
inline ::olc::Address* Person::release_address() {
  // @@protoc_insertion_point(field_release:olc.Person.address)
  
  ::olc::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Person::set_allocated_address(::olc::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:olc.Person.address)
}

// repeated string phone_number = 4;
inline int Person::phone_number_size() const {
  return phone_number_.size();
}
inline void Person::clear_phone_number() {
  phone_number_.Clear();
}
inline const ::std::string& Person::phone_number(int index) const {
  // @@protoc_insertion_point(field_get:olc.Person.phone_number)
  return phone_number_.Get(index);
}
inline ::std::string* Person::mutable_phone_number(int index) {
  // @@protoc_insertion_point(field_mutable:olc.Person.phone_number)
  return phone_number_.Mutable(index);
}
inline void Person::set_phone_number(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:olc.Person.phone_number)
  phone_number_.Mutable(index)->assign(value);
}
inline void Person::set_phone_number(int index, const char* value) {
  phone_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olc.Person.phone_number)
}
inline void Person::set_phone_number(int index, const char* value, size_t size) {
  phone_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olc.Person.phone_number)
}
inline ::std::string* Person::add_phone_number() {
  // @@protoc_insertion_point(field_add_mutable:olc.Person.phone_number)
  return phone_number_.Add();
}
inline void Person::add_phone_number(const ::std::string& value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olc.Person.phone_number)
}
inline void Person::add_phone_number(const char* value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olc.Person.phone_number)
}
inline void Person::add_phone_number(const char* value, size_t size) {
  phone_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olc.Person.phone_number)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Person::phone_number() const {
  // @@protoc_insertion_point(field_list:olc.Person.phone_number)
  return phone_number_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Person::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable_list:olc.Person.phone_number)
  return &phone_number_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace olc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
