// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#include "pch.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace olc {

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_person_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_person_2eproto() {
  protobuf_AddDesc_person_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "person.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, building_),
  };
  Address_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      -1,
      -1,
      -1,
      sizeof(Address),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _is_default_instance_));
  Person_descriptor_ = file->message_type(1);
  static const int Person_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, phone_number_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      -1,
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_person_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_person_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
}

void protobuf_AddDesc_person_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_person_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014person.proto\022\003olc\"+\n\007Address\022\016\n\006street"
    "\030\001 \001(\t\022\020\n\010building\030\002 \001(\005\"X\n\006Person\022\014\n\004na"
    "me\030\001 \001(\t\022\013\n\003age\030\002 \001(\005\022\035\n\007address\030\003 \001(\0132\014"
    ".olc.Address\022\024\n\014phone_number\030\004 \003(\tb\006prot"
    "o3", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "person.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  Person::default_instance_ = new Person();
  Address::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_person_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_person_2eproto {
  StaticDescriptorInitializer_person_2eproto() {
    protobuf_AddDesc_person_2eproto();
  }
} static_descriptor_initializer_person_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kStreetFieldNumber;
const int Address::kBuildingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:olc.Address)
}

void Address::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Address::Address(const Address& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:olc.Address)
}

void Address::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:olc.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_person_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:olc.Address)
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_ = 0;
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:olc.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string street = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "olc.Address.street"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_building;
        break;
      }

      // optional int32 building = 2;
      case 2: {
        if (tag == 16) {
         parse_building:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:olc.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:olc.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:olc.Address)
  // optional string street = 1;
  if (this->street().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Address.street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->street(), output);
  }

  // optional int32 building = 2;
  if (this->building() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->building(), output);
  }

  // @@protoc_insertion_point(serialize_end:olc.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:olc.Address)
  // optional string street = 1;
  if (this->street().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Address.street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->street(), target);
  }

  // optional int32 building = 2;
  if (this->building() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->building(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:olc.Address)
  return target;
}

int Address::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:olc.Address)
  int total_size = 0;

  // optional string street = 1;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->street());
  }

  // optional int32 building = 2;
  if (this->building() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->building());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:olc.Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Address* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:olc.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:olc.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:olc.Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.street().size() > 0) {

    street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  if (from.building() != 0) {
    set_building(from.building());
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:olc.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:olc.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {

  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  street_.Swap(&other->street_);
  std::swap(building_, other->building_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// optional string street = 1;
void Address::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Address::street() const {
  // @@protoc_insertion_point(field_get:olc.Address.street)
  return street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_street(const ::std::string& value) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:olc.Address.street)
}
 void Address::set_street(const char* value) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olc.Address.street)
}
 void Address::set_street(const char* value, size_t size) {
  
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olc.Address.street)
}
 ::std::string* Address::mutable_street() {
  
  // @@protoc_insertion_point(field_mutable:olc.Address.street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Address::release_street() {
  // @@protoc_insertion_point(field_release:olc.Address.street)
  
  return street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_allocated_street(::std::string* street) {
  if (street != NULL) {
    
  } else {
    
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:olc.Address.street)
}

// optional int32 building = 2;
void Address::clear_building() {
  building_ = 0;
}
 ::google::protobuf::int32 Address::building() const {
  // @@protoc_insertion_point(field_get:olc.Address.building)
  return building_;
}
 void Address::set_building(::google::protobuf::int32 value) {
  
  building_ = value;
  // @@protoc_insertion_point(field_set:olc.Address.building)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kNameFieldNumber;
const int Person::kAgeFieldNumber;
const int Person::kAddressFieldNumber;
const int Person::kPhoneNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:olc.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  address_ = const_cast< ::olc::Address*>(&::olc::Address::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:olc.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  address_ = NULL;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:olc.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete address_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_person_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:olc.Person)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
  phone_number_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:olc.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "olc.Person.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional .olc.Address address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // repeated string phone_number = 4;
      case 4: {
        if (tag == 34) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phone_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone_number(this->phone_number_size() - 1).data(),
            this->phone_number(this->phone_number_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "olc.Person.phone_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:olc.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:olc.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:olc.Person)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Person.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // optional .olc.Address address = 3;
  if (this->has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->address_, output);
  }

  // repeated string phone_number = 4;
  for (int i = 0; i < this->phone_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number(i).data(), this->phone_number(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Person.phone_number");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phone_number(i), output);
  }

  // @@protoc_insertion_point(serialize_end:olc.Person)
}

::google::protobuf::uint8* Person::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:olc.Person)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Person.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // optional .olc.Address address = 3;
  if (this->has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->address_, false, target);
  }

  // repeated string phone_number = 4;
  for (int i = 0; i < this->phone_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone_number(i).data(), this->phone_number(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "olc.Person.phone_number");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->phone_number(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:olc.Person)
  return target;
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:olc.Person)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional .olc.Address address = 3;
  if (this->has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->address_);
  }

  // repeated string phone_number = 4;
  total_size += 1 * this->phone_number_size();
  for (int i = 0; i < this->phone_number_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phone_number(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:olc.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:olc.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:olc.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:olc.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  phone_number_.MergeFrom(from.phone_number_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.has_address()) {
    mutable_address()->::olc::Address::MergeFrom(from.address());
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:olc.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:olc.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  name_.Swap(&other->name_);
  std::swap(age_, other->age_);
  std::swap(address_, other->address_);
  phone_number_.UnsafeArenaSwap(&other->phone_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional string name = 1;
void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:olc.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:olc.Person.name)
}
 void Person::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olc.Person.name)
}
 void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olc.Person.name)
}
 ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:olc.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:olc.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:olc.Person.name)
}

// optional int32 age = 2;
void Person::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:olc.Person.age)
  return age_;
}
 void Person::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:olc.Person.age)
}

// optional .olc.Address address = 3;
bool Person::has_address() const {
  return !_is_default_instance_ && address_ != NULL;
}
void Person::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
const ::olc::Address& Person::address() const {
  // @@protoc_insertion_point(field_get:olc.Person.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::olc::Address* Person::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::olc::Address;
  }
  // @@protoc_insertion_point(field_mutable:olc.Person.address)
  return address_;
}
::olc::Address* Person::release_address() {
  // @@protoc_insertion_point(field_release:olc.Person.address)
  
  ::olc::Address* temp = address_;
  address_ = NULL;
  return temp;
}
void Person::set_allocated_address(::olc::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:olc.Person.address)
}

// repeated string phone_number = 4;
int Person::phone_number_size() const {
  return phone_number_.size();
}
void Person::clear_phone_number() {
  phone_number_.Clear();
}
 const ::std::string& Person::phone_number(int index) const {
  // @@protoc_insertion_point(field_get:olc.Person.phone_number)
  return phone_number_.Get(index);
}
 ::std::string* Person::mutable_phone_number(int index) {
  // @@protoc_insertion_point(field_mutable:olc.Person.phone_number)
  return phone_number_.Mutable(index);
}
 void Person::set_phone_number(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:olc.Person.phone_number)
  phone_number_.Mutable(index)->assign(value);
}
 void Person::set_phone_number(int index, const char* value) {
  phone_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olc.Person.phone_number)
}
 void Person::set_phone_number(int index, const char* value, size_t size) {
  phone_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olc.Person.phone_number)
}
 ::std::string* Person::add_phone_number() {
  // @@protoc_insertion_point(field_add_mutable:olc.Person.phone_number)
  return phone_number_.Add();
}
 void Person::add_phone_number(const ::std::string& value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olc.Person.phone_number)
}
 void Person::add_phone_number(const char* value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olc.Person.phone_number)
}
 void Person::add_phone_number(const char* value, size_t size) {
  phone_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olc.Person.phone_number)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Person::phone_number() const {
  // @@protoc_insertion_point(field_list:olc.Person.phone_number)
  return phone_number_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Person::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable_list:olc.Person.phone_number)
  return &phone_number_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace olc

// @@protoc_insertion_point(global_scope)
